!/bin/bash
set -e -o pipefail
set -x
# Copyright (C) 2019 Gunter Miegel coinboot.io
#
# This file is part of Coinboot.
#
# Coinboot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

export RELEASE=$(date +'%Y%m%d')
export VERSION='0.98 Beta'
#QEMU_PARAMETERS='-m 2048 -smp 2 -display none -daemonize -boot n -net nic,model=e1000 -net bridge,br=br-travis'
QEMU_PARAMETERS='-m 2048 -smp 2 -display none -daemonize -boot n -net nic,model=e1000 -net tap,fd=3 3<>/dev/tap4'
# These are just for debugging
QEMU_PARAMETERS_DEBUG='-m 2048 -smp 2 -nographic -boot n -net nic,vlan=0,model=e1000 -net vde,sock=/tmp/myswitch'
MACHINE_IP='192.168.1.10'

if [ -d "/vagrant" ]; then
  BRIDGE='eth1'
else
  BRIDGE='ens4'
fi

get_bridge_interface() {
  ip a | grep '192.168.1.1/24' |grep -oP 'br-.*'
}


get_interface_for_bridge() {
  ip a | grep '192.168.1.1/24' |grep -oP '\s(w+)$'
}

migrate_ips_to_bridge_interface() {
while ip -4 addr show dev $BRIDGE | grep inet; do
 IP=$(ip -4 a show dev $BRIDGE | grep -m 1 inet | cut -d ' ' -f6)
 echo "Migrating $IP to br0 now"
 sudo ip addr del $IP dev $BRIDGE
 sudo ip addr add $IP dev br0
 ip a show dev $BRIDGE
 ip a show dev br0
done
ip a 
ip route
}

update_default_route() {
  ip route
  sudo ip route add 10.30.0.1 dev br0 metric 100
  sudo ip route add default via 10.30.0.1 dev br0 metric 100
  ip route
  sudo ip route del default via 10.30.0.1 dev ens4
  sudo ip route del 10.30.0.1 dev ens4
  ip route
}


#/dev/tap$(cat /sys/class/net/macvtap0/ifindex)
# https://superuser.com/a/368023
add_macvlan_interface() {
  ip a
  sudo ip link add link $BRIDGE name macvlan0 type macvlan mode bridge
  sudo ip addr add 192.168.1.2/24 dev macvlan0
  sudo ip link set up dev macvlan0
  ip a
  ip route flush dev $BRIDGE
  ip route add 192.168.1.1 dev macvlan0 proto static
}

add_address_to_br0() {
  ip a
  sudo ip addr add 192.168.1.2/24 dev br0
  ip a
}

add_interface_to_bridge() {
  brctl show
  brctl addbr br-travis
  brctl addif get_interface_for_bridge br-travis
  brctl show
}

move_interface_to_bridge() {
  brctl show
  ip a
  if [[ -z  $(get_bridge_interface) ]]; then
    sudo brctl addbr br0
    sudo brctl addif br0 $BRIDGE
    sudo ip link set br0 up
  fi 
  brctl show
}


change_to_build_dir() {
if [ ! -d "/vagrant" ] && [[ $(basename $PWD) != server ]]; then
  cd server
else
  cd /vagrant/server
fi
}

run_docker_compose() {
  echo 'Debug inside run_docker_compose()'
  pwd
  ls -la
  docker-compose -f ../docker-compose.yml -f docker-compose_travis-ci.yml up -d
  echo 'Debug inside run_docker_compose()'
}

# TODO: Refactor this - should be possible with one curl call
wait_for_server_to_be_ready() {
  while ! [ $(curl --silent http://192.168.1.2 | jq length) -gt 4 ]; do
    curl --silent http://192.168.1.2 | jq '.[].name'
    echo '------------'
    sleep 10
  done
}

 run_qemu_bios() {
 #sudo exec 3<>/dev/tap4
 eval sudo qemu-system-x86_64 $QEMU_PARAMETERS
}

 run_qemu_bios_debug() {
  vdeq qemu-system-x86_64 $QEMU_PARAMETERS_DEBUG
}

setup_vde_switch() {
  vde_switch -F -sock /tmp/myswitch -tap tap4

}


run_qemu_uefi() {
 # Load a UEFI firmware as "bios".
 sudo qemu-system-x86_64 $QEMU_PARAMETERS -bios /usr/share/OVMF/OVMF_CODE.fd
}


run_with_libvirt_bios() {
  sudo virt-install --pxe --name coinboot-bios --memory 1024 --disk none --network bridge=br0 --boot menu=on,useserial=on --noautoconsole
}

run_with_libvirt_uefi() {
  sudo virt-install --pxe --name coinboot-uefi --memory 1024 --disk none --network bridge=br0 --boot uefi,menu=on,useserial=on --noautoconsole
}

verify_via_tty() {
 expect <<- EOF
 spawn sudo qemu-system-x86_64 $QEMU_PARAMETERS_DEBUG
 expect "192-168-1-10 login: "
 send "ubuntu\n"

 expect "Password: "
 send "ubuntu\n"

 expect "# "
 send "ip a; sudo shutdown -h now"
EOF
}

verify_over_ssh() {
  while ! ping -c 1 $MACHINE_IP; do
    echo 'Waiting for Coinboot machine to respond to our ICMP echo requests ...'
    sleep 10
  done

  while ! nc -z $MACHINE_IP 22; do
    echo 'Waiting for Coinboot machine to listen on port 22/SSH ...'
  sleep 10
  done

  # FIXME: RELEASE does not expanse to date string when 'latest' is specified
  # while ! sshpass -p ubuntu ssh -o StrictHostKeyChecking=no -l ubuntu -p 22 $MACHINE_IP "grep -C 10 $RELEASE /etc/motd && lsb_release -a && uname -a && zramctl" ; do
  while ! sshpass -p ubuntu ssh -o StrictHostKeyChecking=no -l ubuntu -p 22 $MACHINE_IP "cat /etc/motd && lsb_release -a && uname -a && df -m && free -m && zramctl" ; do
    echo 'Waiting for SSH login to succeed...'
  sleep 10
  done

  sudo killall qemu-system-x86_64

  while nc -z $MACHINE_IP 22; do
    echo 'Waiting for Coinboot machine to stop listen on port 22/SSH ...'
    sleep 10
  done
 }

run_qemu_uefi() {
 # Load a UEFI firmware as "bios".
 sudo qemu-system-x86_64 $QEMU_PARAMETERS -bios /usr/share/OVMF/OVMF_CODE.fd
}

verify_via_tty() {
 expect <<- EOF
 spawn sudo qemu-system-x86_64 $QEMU_PARAMETERS_DEBUG
 expect "192-168-1-10 login: "
 send "ubuntu\n"

 expect "Password: "
 send "ubuntu\n"

 expect "# "
 send "ip a; sudo shutdown -h now"
EOF
}

verify_over_ssh() {
  while ! ping -c 1 $MACHINE_IP; do
    echo 'Waiting for Coinboot machine to respond to our ICMP echo requests ...'
    sleep 10
  done

  while ! nc -z $MACHINE_IP 22; do
    echo 'Waiting for Coinboot machine to listen on port 22/SSH ...'
  sleep 10
  done

  # FIXME: RELEASE does not expanse to date string when 'latest' is specified
  # while ! sshpass -p ubuntu ssh -o StrictHostKeyChecking=no -l ubuntu -p 22 $MACHINE_IP "grep -C 10 $RELEASE /etc/motd && lsb_release -a && uname -a && zramctl" ; do
  while ! sshpass -p ubuntu ssh -o StrictHostKeyChecking=no -l ubuntu -p 22 $MACHINE_IP "cat /etc/motd && lsb_release -a && uname -a && df -m && free -m && zramctl" ; do
    echo 'Waiting for SSH login to succeed...'
  sleep 10
  done

  sudo virsh shutdown 1
  sudo virsh undefine 1 

  sudo virsh list --all

  while nc -z $MACHINE_IP 22; do
    echo 'Waiting for Coinboot machine to stop listen on port 22/SSH ...'
    sleep 10
  done
 }

# ------------- main -------------

sudo apt-get update

# TODO remove virt-viewer when done with debugging.
sudo apt-get  install --yes --no-install-recommends jq qemu-system-x86 ipxe-qemu sshpass ovmf expect libvirt-bin virtinst virt-viewer
sudo mkdir -p /etc/qemu
echo 'allow all' | sudo tee /etc/qemu/bridge.conf

change_to_build_dir

move_interface_to_bridge
update_default_route
migrate_ips_to_bridge_interface
add_address_to_br0
sudo ip link set dev br0 up 
sudo ip a
# We also need to load the environment before calling docker-compose:
# https://github.com/docker/compose/issues/3435
export $(grep -v '^#' ./conf/environment/* | xargs)

run_docker_compose

wait_for_server_to_be_ready

run_with_libvirt_bios
sudo virsh list --all

verify_over_ssh

run_with_libvirt_uefi
sudo virsh list --all

verify_over_ssh
