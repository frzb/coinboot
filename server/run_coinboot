#!/bin/bash
set -e -o pipefail

# Copyright (C) 2019 Gunter Miegel coinboot.io
#
# This file is part of Coinboot.
#
# Coinboot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

export RELEASE=$RELEASE_TAG
export VERSION='0.98 Beta'
MACHINE_IP='192.168.1.10'
MACHINE_MAC_ADDRESS_BIOS='52:54:04:b9:ab:45'
MACHINE_MAC_ADDRESS_UEFI='52:54:04:b9:ab:46'
DEFAULT_ROUTE=$(ip route | grep default | grep -v br0)
DEFAULT_GW=$(ip route | grep default | grep -v br0 | cut -d ' ' -f 3)
EXT_IF=$(ip route show default | grep -oP '(?<=dev )\w+')

echo "Debug environment at run_coinboot"
env

get_ip_address_associated() {
  local MACHINE_MAC_ADDRESS=$1

  timeout 240s  bash -c "while ! ip neighbour show dev br0 nud reachable | grep $MACHINE_MAC_ADDRESS >&2 ; do
    echo "Waiting until MAC address $MACHINE_MAC_ADDRESS of VM shows up" >&2
    sleep 10
  done"

  ip neighbour show dev br0 nud reachable | grep $MACHINE_MAC_ADDRESS -m 1| cut -d ' ' -f 1
}

change_to_build_dir() {
  if [ ! -d "/vagrant" ] && [[ $(basename $PWD) != server ]]; then
    cd server
  else
    cd /vagrant/server
  fi
}

get_bridge_interface() {
  ip a | grep '192.168.1.2/24' |grep -oP 'br-.*'
}

get_interface_for_bridge() {
  ip a | grep '192.168.1.2/24' |grep -oP '\s(w+)$'
}

get_default_route() {
  ip route | grep default | grep -v br0
}

get_default_gateway() {
  ip route | grep default | grep -v br0 | cut -d ' ' -3
}

update_default_route() {
  ip route
  if [ ! -d "/vagrant" ]; then
    sudo dhclient -v br0
    ip route
  else
    echo "Not running at Travis CI - update of default route skipped"
  fi
}

add_address_to_br0() {
  sudo ip addr add 192.168.1.2/24 dev br0
}

move_ext_interface_to_bridge() {
  brctl show
  ip a
  if [[ -z  $(get_bridge_interface) ]] && ! ip a | grep -oP '\sbr0'; then
    sudo brctl addbr br0
    sudo brctl addif br0 $EXT_IF
    sudo ip link set br0 up
  fi
  brctl show
}

migrate_ips_to_bridge_interface() {
  ip a
  while ip -4 addr show dev $EXT_IF | grep inet; do
   IP=$(ip -4 a show dev $EXT_IF | grep -m 1 inet | cut -d ' ' -f6)
   echo "Migrating $IP to br0 now"
   sudo ip addr add $IP dev br0
   sudo ip addr del $IP dev $EXT_IF
  done
}


build_docker_image() {
  docker build -t coinboot/coinboot:latest ./docker/
}

run_docker_compose() {
  pwd
  docker-compose up -d
  sleep 30
  docker-compose logs
}

# TODO: Refactor this - should be possible with one curl call
wait_for_server_to_be_ready() {
  while ! [ $(curl --silent http://192.168.1.2 | jq length) -gt 4 ]; do
    curl --silent http://192.168.1.2 | jq '.[].name'
    echo '------------'
    sleep 10
  done
}

run_with_libvirt_bios() {
  sudo virt-install --pxe --name coinboot-bios --memory 1024 --disk none --network bridge=br0,mac=$MACHINE_MAC_ADDRESS_BIOS --boot menu=on,useserial=on --noautoconsole --graphics vnc,listen=0.0.0.0
}

run_with_libvirt_uefi() {
  sudo virt-install --pxe --name coinboot-uefi --memory 1024 --disk none --network bridge=br0,mac=$MACHINE_MAC_ADDRESS_UEFI --boot uefi,menu=on,useserial=on --noautoconsole --graphics vnc,listen=0.0.0.0
}

verify_and_shutdown_over_ssh() {
  local MACHINE_MAC_ADDRESS=$1
  local MACHINE_IP=$(get_ip_address_associated $MACHINE_MAC_ADDRESS)

  timeout 240s bash -c "while ! ping -c 1 $MACHINE_IP; do
    echo 'Waiting for Coinboot machine to respond to our ICMP echo requests ...'
    sleep 10
  done"

  timeout 240s bash -c "while ! nc -z $MACHINE_IP 22; do
    echo 'Waiting for Coinboot machine to listen on port 22/SSH ...'
  sleep 10
  done"

  # FIXME: RELEASE does not expanse to date string when 'latest' is specified
  timeout 240s bash -c "while ! sshpass -p ubuntu ssh -o StrictHostKeyChecking=no -l ubuntu -p 22 $MACHINE_IP "cat /etc/motd && lsb_release -a && uname -a && df -m && free -m && zramctl"; do
    echo 'Waiting for SSH login to succeed...'
  sleep 10
  done"

  DOMAIN=$(sudo virsh list --name)
  sudo virsh shutdown $DOMAIN
  sudo virsh list --all
 }

# ------------- main -------------

sudo apt-get update

sudo apt-get  install --yes --no-install-recommends bridge-utils jq sshpass libvirt-daemon-system: virtinst qemu-system-x86 ipxe-qemu ovmf

# Enable the execution of virsh without root access
# mostly used for local debugging and just for Vagrant.
if [ -d "/vagrant" ]; then
  if id | grep -v libvirt; then
    sudo usermod -a -G libvirt vagrant
  fi
fi

change_to_build_dir

move_ext_interface_to_bridge
migrate_ips_to_bridge_interface
update_default_route
echo 'nameserver 8.8.8.8' | sudo tee /etc/resolv.conf
dig registry-1.docker.io || true

if ! [ -d "/vagrant" ]; then
  add_address_to_br0
  update_default_route
fi

# We also need to load the environment before calling docker-compose:
# https://github.com/docker/compose/issues/3435
export $(grep -v '^#' ./conf/environment/* | xargs)

build_docker_image

run_docker_compose

wait_for_server_to_be_ready

run_with_libvirt_bios

verify_and_shutdown_over_ssh $MACHINE_MAC_ADDRESS_BIOS

run_with_libvirt_uefi

verify_and_shutdown_over_ssh $MACHINE_MAC_ADDRESS_UEFI
