#!/bin/bash
set -e -o pipefail
set -x
# Copyright (C) 2019 Gunter Miegel coinboot.io
#
# This file is part of Coinboot.
#
# Coinboot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


export RELEASE=$(date +'%Y%m%d')
export VERSION='0.98 Beta'
QEMU_PARAMETERS="-m 2048 \
 -smp 2 \
 -display none \
 -nographic \
 -serial mon:stdio \
 -daemonize \
 -boot n \
 -net nic,model=e1000 \
 -net bridge,br=$(ip a|grep '192.168.1.1/24' | grep -oP 'br-.*')"
MACHINE_IP='192.168.1.10'

change_to_build_dir() {
if [[ $(basename $PWD) != server ]]; then
  cd server
fi
}

run_docker_compose() {
  echo 'Debug inside run_docker_compose()'
  pwd
  ls -la
  docker-compose -f docker-compose_travis-ci.yml up -d
  docker-compose -f docker-compose_travis-ci.yml exec coinboot env
  docker-compose -f docker-compose_travis-ci.yml ps
  echo 'Debug inside run_docker_compose()'
}

# TODO: Refactor this - should be possible with one curl call
wait_for_server_to_be_ready() {
  while ! [ $(curl --silent http://192.168.1.2 | jq length) -gt 4 ]; do
    curl --silent http://192.168.1.2 | jq '.[].name'
    echo '------------'
    sleep 10
  done
}

 run_qemu_bios() {
 qemu-system-x86_64 $QEMU_PARAMETERS
}

run_qemu_uefi() {
 # Load a UEFI firmware as "bios".
 qemu-system-x86_64 $QEMU_PARAMETERS -bios /usr/share/OVMF/OVMF_CODE.fd
}

verify_over_ssh() {
  while ! ping -c 1 $MACHINE_IP; do
    echo 'Waiting for Coinboot machine to respond to our ICMP echo requests ...'
    sleep 10
  done

  while ! nc -z $MACHINE_IP 22; do
    echo 'Waiting for Coinboot machine to listen on port 22/SSH ...'
  sleep 10
  done

  while ! sshpass -p ubuntu ssh -o StrictHostKeyChecking=no -l ubuntu -p 22 $MACHINE_IP "grep -C 10 $RELEASE /etc/motd && lsb_release -a && uname -a && zramctl" ; do
    echo 'Waiting for SSH login to succeed...'
  sleep 10
  done

  killall qemu-system-x86_64

  while nc -z $MACHINE_IP 22; do
    echo 'Waiting for Coinboot machine to stop listen on port 22/SSH ...'
    sleep 10
  done
 }

# ------------- main -------------

sudo apt-get update

sudo apt-get  install --yes qemu-system-x86 ipxe-qemu sshpass

change_to_build_dir

# We also need to load the environment before calling docker-compose:
# https://github.com/docker/compose/issues/3435
export $(grep -v '^#' ./conf/environment/* | xargs)

run_docker_compose

wait_for_server_to_be_ready

run_qemu_bios
verify_over_ssh

run_qemu_uefi
verify_over_ssh

set +x
