---
# Copyright (C) 2018, 2020 - 2022 Gunter Miegel coinboot.io
#
# This file is part of Coinboot.
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.
#
# Please notice even while this script is licensed with the
# MIT license the software packaged by this script may be licensed by
# an other license with different terms and conditions.
# You have to agree to the license of the packaged software to use it.

plugin: AMDGPU ROCr OpenCL
archive_name: amdgpu_rocr_opencl
version: 21.50.2
description: AMD RX Vega RX 56/64, RX 5000/6000 with support for ROCr OpenCL 2.0
maintainer: Gunter Miegel <gunter.miegel@coiboot.io>
source: https://www.amd.com/en/support/kb/release-notes/rn-amdgpu-unified-linux-21-50
run: |
  set -e

  # ------ Tunable variables ----------
  # Specfiy AMD Radeon GPU series codename.
  # --- Legacy OpenCL stack ---
  # R9 R300 series: tonga
  # RX 400/500 series: polaris
  # --- ROCr OpenCL stack (support since Vega 10) ---
  # RX Vega series: vega
  # RX 5000/6000 series: navi
  # BC-250 series: cyan_skillfish
  GPU_CODENAME='vega navi'
  # Use upstream GPU firmware from kernel.org: true or false
  UPSTREAM_FIRMWARE=false
  # ------ Tunable variables end ------

  sudo apt-get update

  AMDGPU_INSTALL_PACKAGE=amdgpu-install_21.50.2.50002-1_all.deb
  if [ ! -z $DEBIRF_KERNEL ]; then
    KERNEL_RELEASE=$DEBIRF_KERNEL
  fi
  PACKAGES="wget linux-headers-$KERNEL_RELEASE"
  # The DKMS package is installed explicitly to purge it without wiping the dependencies.
  AMDGPU_DKMS_PACKAGE=amdgpu-dkms
  AMDGPU_CACHE_PATH=/mnt/cache/amdgpu
  EXTRA_MODULES_PACKAGE="linux-modules-extra-$KERNEL_RELEASE"
  EXTRA_MODULES_PACKAGE_FILE=$(apt-cache show $EXTRA_MODULES_PACKAGE | grep -oP $EXTRA_MODULES_PACKAGE.*deb)
  UPSTREAM_FIRMWARE_ARCHIVE=linux-firmware-20211216.tar.gz

  sudo apt-get install $PACKAGES --yes

  if [ -d $AMDGPU_CACHE_PATH ]; then
    mkdir -p $AMDGPU_CACHE_PATH
  fi

  # Let's cache the downloaded archive and the decompressed
  # archive on the build host - time saving once more.
  # Download is only allowed with this referer!
  if ! [ -f "$AMDGPU_CACHE_PATH"/"$AMDGPU_INSTALL_PACKAGE" ]; then
    wget --progress=bar:force \
       https://repo.radeon.com/amdgpu-install/21.50.2/ubuntu/focal/"$AMDGPU_INSTALL_PACKAGE" -P $AMDGPU_CACHE_PATH
  else
    echo "$AMDGPU_INSTALL_PACKAGE is already in build cache."
  fi

  if ! [ -f "$DEBIRF_ROOT/tmp/$AMDGPU_INSTALL_PACKAGE" ]; then
   cp -r "$AMDGPU_CACHE_PATH/$AMDGPU_INSTALL_PACKAGE" /tmp/
  else
    echo "$AMDGPU_INSTALL_PACKAGE is already copied to the chroot."
  fi

  if [ "UPSTREAM_FIRMWARE" = "true" ]; then
    if ! [ -f "$AMDGPU_CACHE_PATH"/"$UPSTREAM_FIRMWARE_ARCHIVE" ]; then
      wget --progress=bar:force \
         https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/snapshot/$UPSTREAM_FIRMWARE_ARCHIVE -P $AMDGPU_CACHE_PATH
    else
      echo "$UPSTREAM_FIRMWARE_ARCHIVE is already in build cache."
    fi

    if ! [ -f "$DEBIRF_ROOT/tmp/$UPSTREAM_FIRMWARE_ARCHIVE" ]; then
     cp -r "$AMDGPU_CACHE_PATH/$UPSTREAM_FIRMWARE_ARCHIVE" /tmp/
    else
      echo "$UPSTREAM_FIRMWARE_ARCHIVE is already copied to the chroot."
    fi
  fi

  # The amdgpu-pro-install script is not running properly non-interactive
  # it uses 'apt-get install' and asks for (Y/n).
  # So we install the packages on our own.
  # 1. Create the local deb repository
  # 2. Update the package list
  # 3. Install the packages

  sudo apt-get install --yes /tmp/$AMDGPU_INSTALL_PACKAGE

  sudo  sed -i 's/^#deb /deb /' /etc/apt/sources.list.d/amdgpu-proprietary.list

  sudo apt-get update

  sudo tee /usr/bin/update-initramfs << EOF
  #!/usr/bin/bash

  true
  EOF

  sudo chmod 755 /usr/bin/update-initramfs

  # Using both OpenCL stacks is possible
  if [[ $GPU_CODENAME =~ tonga|fuji|polaris ]]; then
    echo 'Building Coinboot plugin with Legacy OpenCl stack'
    AMDGPU_OPENCL_PACKAGES='clinfo-amdgpu-pro opencl-orca-amdgpu-pro-icd'
  fi

  if [[ $GPU_CODENAME =~ vega|navi|cyan_skillfish ]]; then
    echo 'Building Coinboot plugin with ROCr OpenCl stack'
    AMDGPU_OPENCL_PACKAGES="$AMDGPU_OPENCL_PACKAGES ./rocm-opencl_2.0.0.50002-72_coinboot_amd64.deb libnuma1"
    # Dependencies pull in more package then we need for just running our OpenCL payloads.
    # So wee need to adapt the dependencies of the rocm-opencl package.
    # Orignal rocm-opencl dependencies: rocm-ocl-icd, libelf-dev, comgr, hsa-rocr-dev, rocm-core
    # Minimized rocm-opencl dependencies: rocm-ocl-icd, comgr, hsa-rocr, rocm-core
    cd /tmp
    apt-get download rocm-opencl
    dpkg-deb -x /tmp/rocm-opencl*.deb rocm-opencl
    dpkg-deb --control /tmp/rocm-opencl*.deb rocm-opencl/DEBIAN
    sed -i 's/Depends:.*/Depends: rocm-ocl-icd, rocm-core, hsa-rocr, comgr/' /tmp/rocm-opencl/DEBIAN/control
    cat /tmp/rocm-opencl/DEBIAN/control
    dpkg -b rocm-opencl rocm-opencl_2.0.0.50002-72_coinboot_amd64.deb
  fi

  if [ -z $AMDGPU_OPENCL_PACKAGES ]; then
    echo 'No OpenCL stack could be determined please verify GPU_CODENAME'
    exit 1
  fi

  sudo apt-get install --yes $AMDGPU_OPENCL_PACKAGES

  sudo apt-get install --yes $AMDGPU_DKMS_PACKAGE

  # Purge installed packages of this modules to free up the space.
  # But keep the OpenCL related packages.
  # The DKMS package comes with sources at /usr/src/ which use a lot of space.
  # As the DKMS package is a dependcy of 'opencl-amdgpu-pro' we set it on hold
  # to keep the OpenCL stuff while we dump the DKMS package.

  # The module amdgpu.ko requires amd_iommu_v2.ko which comes with the linux-modules-extra-
  sudo apt-get download "$EXTRA_MODULES_PACKAGE"

  # dpkg-deb -x needs a full path!
  sudo dpkg -x $PWD/$EXTRA_MODULES_PACKAGE_FILE /tmp/
  sudo rm -rf $PWD/$EXTRA_MODULES_PACKAGE_FILE

  sudo find /tmp/lib -name 'iommu_v2.ko' -exec install -vD {} /lib/modules/"$KERNEL_RELEASE"/kernel/drivers/iommu/amd/iommu_v2.ko \;

  sudo rm -rf /tmp/lib

  sudo cp -v /lib/modules/"$KERNEL_RELEASE"/updates/dkms/amd* /tmp/

  sudo cp -Rv /lib/firmware /tmp/

  sudo apt-get purge $PACKAGES --yes

  # Additional packages which can be removed to save space.
  sudo apt-get purge --yes --allow-remove-essential ^gcc-9 grub-common dialog
  sudo apt autoremove --purge --yes

  dpkg -l|grep -P 'o.*cl'

  sudo cp -v /tmp/amd*.ko /lib/modules/"$KERNEL_RELEASE"/updates/dkms/

  sudo mkdir -p /lib/firmware/updates/amdgpu

  if [ "$GPU_CODENAME" = "all" ]; then
    sudo find /tmp/firmware -type f -exec cp -v {} /lib/firmware/updates/amdgpu/ \;
  else
    for gpu_codename in $GPU_CODENAME; do
      sudo find /tmp/firmware -name "${gpu_codename}*" -exec cp -v {} /lib/firmware/updates/amdgpu/ \;
    done
  fi

  du -ch /lib/firmware/updates/amdgpu/*

  sudo depmod $KERNEL_RELEASE

  # Remove mocked update-initramfs
  sudo rm -v /usr/bin/update-initramfs
